// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocksusecase

import (
	context "context"

	entity "github.com/haminh0307/golang-clean-arch-template/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// User is an autogenerated mock type for the User type
type User struct {
	mock.Mock
}

type User_Expecter struct {
	mock *mock.Mock
}

func (_m *User) EXPECT() *User_Expecter {
	return &User_Expecter{mock: &_m.Mock}
}

// ReadOne provides a mock function with given fields: ctx, id
func (_m *User) ReadOne(ctx context.Context, id entity.ID) (*entity.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ReadOne")
	}

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.ID) (*entity.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.ID) *entity.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.ID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// User_ReadOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadOne'
type User_ReadOne_Call struct {
	*mock.Call
}

// ReadOne is a helper method to define mock.On call
//   - ctx context.Context
//   - id entity.ID
func (_e *User_Expecter) ReadOne(ctx interface{}, id interface{}) *User_ReadOne_Call {
	return &User_ReadOne_Call{Call: _e.mock.On("ReadOne", ctx, id)}
}

func (_c *User_ReadOne_Call) Run(run func(ctx context.Context, id entity.ID)) *User_ReadOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.ID))
	})
	return _c
}

func (_c *User_ReadOne_Call) Return(_a0 *entity.User, _a1 error) *User_ReadOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *User_ReadOne_Call) RunAndReturn(run func(context.Context, entity.ID) (*entity.User, error)) *User_ReadOne_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOne provides a mock function with given fields: ctx, id, update
func (_m *User) UpdateOne(ctx context.Context, id entity.ID, update *entity.UserToUpdate) error {
	ret := _m.Called(ctx, id, update)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOne")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.ID, *entity.UserToUpdate) error); ok {
		r0 = rf(ctx, id, update)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// User_UpdateOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOne'
type User_UpdateOne_Call struct {
	*mock.Call
}

// UpdateOne is a helper method to define mock.On call
//   - ctx context.Context
//   - id entity.ID
//   - update *entity.UserToUpdate
func (_e *User_Expecter) UpdateOne(ctx interface{}, id interface{}, update interface{}) *User_UpdateOne_Call {
	return &User_UpdateOne_Call{Call: _e.mock.On("UpdateOne", ctx, id, update)}
}

func (_c *User_UpdateOne_Call) Run(run func(ctx context.Context, id entity.ID, update *entity.UserToUpdate)) *User_UpdateOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.ID), args[2].(*entity.UserToUpdate))
	})
	return _c
}

func (_c *User_UpdateOne_Call) Return(_a0 error) *User_UpdateOne_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *User_UpdateOne_Call) RunAndReturn(run func(context.Context, entity.ID, *entity.UserToUpdate) error) *User_UpdateOne_Call {
	_c.Call.Return(run)
	return _c
}

// NewUser creates a new instance of User. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUser(t interface {
	mock.TestingT
	Cleanup(func())
}) *User {
	mock := &User{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
