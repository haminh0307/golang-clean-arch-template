// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocksusecase

import (
	context "context"

	entity "github.com/haminh0307/golang-clean-arch-template/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// Authentication is an autogenerated mock type for the Authentication type
type Authentication struct {
	mock.Mock
}

type Authentication_Expecter struct {
	mock *mock.Mock
}

func (_m *Authentication) EXPECT() *Authentication_Expecter {
	return &Authentication_Expecter{mock: &_m.Mock}
}

// SignIn provides a mock function with given fields: ctx, username, password
func (_m *Authentication) SignIn(ctx context.Context, username string, password string) (string, error) {
	ret := _m.Called(ctx, username, password)

	if len(ret) == 0 {
		panic("no return value specified for SignIn")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, username, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, username, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Authentication_SignIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignIn'
type Authentication_SignIn_Call struct {
	*mock.Call
}

// SignIn is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - password string
func (_e *Authentication_Expecter) SignIn(ctx interface{}, username interface{}, password interface{}) *Authentication_SignIn_Call {
	return &Authentication_SignIn_Call{Call: _e.mock.On("SignIn", ctx, username, password)}
}

func (_c *Authentication_SignIn_Call) Run(run func(ctx context.Context, username string, password string)) *Authentication_SignIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Authentication_SignIn_Call) Return(_a0 string, _a1 error) *Authentication_SignIn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Authentication_SignIn_Call) RunAndReturn(run func(context.Context, string, string) (string, error)) *Authentication_SignIn_Call {
	_c.Call.Return(run)
	return _c
}

// SignUp provides a mock function with given fields: ctx, user
func (_m *Authentication) SignUp(ctx context.Context, user *entity.UserToCreate) (entity.ID, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for SignUp")
	}

	var r0 entity.ID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.UserToCreate) (entity.ID, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.UserToCreate) entity.ID); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(entity.ID)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.UserToCreate) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Authentication_SignUp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignUp'
type Authentication_SignUp_Call struct {
	*mock.Call
}

// SignUp is a helper method to define mock.On call
//   - ctx context.Context
//   - user *entity.UserToCreate
func (_e *Authentication_Expecter) SignUp(ctx interface{}, user interface{}) *Authentication_SignUp_Call {
	return &Authentication_SignUp_Call{Call: _e.mock.On("SignUp", ctx, user)}
}

func (_c *Authentication_SignUp_Call) Run(run func(ctx context.Context, user *entity.UserToCreate)) *Authentication_SignUp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.UserToCreate))
	})
	return _c
}

func (_c *Authentication_SignUp_Call) Return(_a0 entity.ID, _a1 error) *Authentication_SignUp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Authentication_SignUp_Call) RunAndReturn(run func(context.Context, *entity.UserToCreate) (entity.ID, error)) *Authentication_SignUp_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthentication creates a new instance of Authentication. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthentication(t interface {
	mock.TestingT
	Cleanup(func())
}) *Authentication {
	mock := &Authentication{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
